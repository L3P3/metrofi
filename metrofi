#!/bin/env node

const request_original = require('http').request;

const request = options => new Promise((resolve, reject) => {
	const {body} = options;
	if (body) delete options.body;
	const req = request_original('http://wifi.metronom.de/de/', options, res => {
		if (![200, 302].includes(res.statusCode)) {
			reject(res.statusMessage);
		}
		const body = [];
		res.on('data', chunk => body.push(chunk));
		res.on('end', () => {
			resolve(Buffer.concat(body).toString());
		});
	});
	req.on('error', e => reject(e.message));
	if (body) req.write(body);
	req.end();
});

(async () => {

let current_raw;

try {
	current_raw = await request({
		timeout: 3e3,
	});
}
catch (e) {
	console.error('cannot connect: ' + e);
	return;
}

const token = current_raw.substr(
	current_raw.indexOf('name="CSRFToken"') + 24,
	32
);
const loggedIn = current_raw.includes('name="logout" value="true"');

console.log('token:    ', token);
console.log('logged in:', loggedIn);
console.log();

switch (process.argv[2]) {
	case 'login':
	case '1':
		if (loggedIn) {
			console.log('already logged in!');
			break;
		}
		console.log('logging in...');
		await request({
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
				'Cookie': 'csrf=' + token,
			},
			body: 'login=true&CSRFToken=' + token,
		});
		console.log('done.');
		break;
	case 'logout':
	case '0':
		if (!loggedIn) {
			console.log('already logged out!');
			break;
		}
		console.log('logging out...');
		await request({
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded',
				'Cookie': 'csrf=' + token,
			},
			body: 'logout=true&CSRFToken=' + token,
		});
		console.log('done.');
		break;
	default:
		console.log('usage: metrofi [login|logout]');
}

})();
